
on:
  workflow_call:
    inputs:
      terraformPath:
        required: true
        type: string
      targetEnvironment:
        required: true
        type: string
    # secrets:
    #   envPAT:
    #     required: true

jobs:
  tfplan:
    name: 'tfplan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.targetEnvironment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        #working-directory: './terraform'
        
    steps:
      # Authentication
      - name: OIDC Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          enable-AzPSSession: true
          # allow-no-subscriptions: true

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of terraform CLI and configure the terraform CLI configuration file with a terraform Cloud user API token
      - name: Setup tf-plan
        uses:  hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: terraform init
        run: |
          cd dev-test
          terraform init -input=false \
          -backend-config="resource_group_name=hub-tier0" \
          -backend-config="storage_account_name=mywestus3sattt" \
          -backend-config="container_name=terraform" \
          -backend-config="key=dev.tfstate"
          # --backend-config="../dev.hcl"
        working-directory: '${{ github.workspace }}/terraform'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_USE_OIDC: true

      - name: terraform plan
        run: |
          cd dev-test
          terraform plan
        working-directory: '${{ github.workspace }}/terraform'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Apply
        run: |
          cd dev-test
          terraform apply \
          -input=false \
          -auto-approve 
        working-directory: '${{ github.workspace }}/terraform'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_USE_OIDC: true

      - name: destroy
        run: |
          cd dev-test
          terraform destroy \
          -input=false \
          -auto-approve 
        working-directory: '${{ github.workspace }}/terraform'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_USE_OIDC: true

    # # initialize a new or existing terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: terraform init
    #   run: |

    #     terraform init
    #   working-directory: '${{ github.workspace }}/terraform'
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
    #     ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    #     ARM_USE_OIDC: true

    # # Checks that all terraform configuration files adhere to a canonical format
    # - name: terraform Format
    #   run: terraform fmt #-check

    # # Generates an execution plan for tf-plan
    # - name: terraform Plan
    #   run: |

    #     terraform plan
    #   working-directory: '${{ github.workspace }}/terraform'
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
    #     ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    #     ARM_USE_OIDC: true

    #   # On push to master, build or change infrastructure according to terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "terraform Cloud". 
    #   #See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks

    # - name: terraform Apply
    #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    #   run: |

    #     terraform apply -auto-approve
    #   working-directory: '${{ github.workspace }}/terraform'
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
    #     ARM_SUBSCRIPTION_ID : ${{ secrets.SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    #     ARM_USE_OIDC: true
